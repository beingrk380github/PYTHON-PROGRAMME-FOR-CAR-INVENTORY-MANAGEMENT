You are working on a Python program to simulate a car dealership's inventory management system. The system aims to model cars and their attributes accurately.

Scenario: Car dealership's inventory management system
Task-1. You are tasked with creating a Python program to represent vehicles using a class. Each car should have attributes for maximum speed and mileage.

class Car:
    def __init__(self, max_speed, mileage):
        self.max_speed = max_speed
        self.mileage = mileage

    def display_info(self):
        print(f"Max Speed: {self.max_speed} km/h")
        print(f"Mileage: {self.mileage} km")

# Example usage
car1 = Car(200, 15000)
car1.display_info()


Task-2. Update the class with the default color for all vehicles," white".


class Car:
    def __init__(self, max_speed, mileage, color="white"):
        self.max_speed = max_speed
        self.mileage = mileage
        self.color = color

    def display_info(self):
        print(f"Max Speed: {self.max_speed} km/h")
        print(f"Mileage: {self.mileage} km")
        print(f"Color: {self.color}")

# Example usage
car1 = Car(200, 15000)
car1.display_info()

car2 = Car(180, 12000, "red")
car2.display_info()

Task-3. Additionally, you need to create methods in the Vehicle class to assign seating capacity to a vehicle.


class Car:
    def __init__(self, max_speed, mileage, color="white"):
        self.max_speed = max_speed
        self.mileage = mileage
        self.color = color
        self.seating_capacity = None  # Initialize seating capacity with None

    def display_info(self):
        print(f"Max Speed: {self.max_speed} km/h")
        print(f"Mileage: {self.mileage} km")
        print(f"Color: {self.color}")
        if self.seating_capacity:
            print(f"Seating Capacity: {self.seating_capacity} seats")
        else:
            print("Seating Capacity: Not assigned")

    def set_seating_capacity(self, capacity):
        self.seating_capacity = capacity

# Example usage
car1 = Car(200, 15000)
car1.set_seating_capacity(5)
car1.display_info()

car2 = Car(180, 12000, "red")
car2.set_seating_capacity(4)
car2.display_info()

Task-4. Create a method to display all the properties of an object of the class.


class Vehicle:
    color = "white"

    def __init__(self, max_speed, mileage):
        self.max_speed = max_speed
        self.mileage = mileage
        self.seating_capacity = None

    def assign_seating_capacity(self, seating_capacity):
        self.seating_capacity = seating_capacity

    def display_properties(self):
        print("Properties of the Vehicle:")
        print("Color:", self.color)
        print("Maximum Speed:", self.max_speed)
        print("Mileage:", self.mileage)
        print("Seating Capacity:", self.seating_capacity)

# Example usage
vehicle1 = Vehicle(220, 18000)
vehicle1.assign_seating_capacity(5)
vehicle1.display_properties()


Task-5. Additionally, you need to create two objects of the Vehicle class object that should have a max speed of 200kmph and mileage of 20kmpl with five seating capacities, and another car object should have a max speed of 180kmph and mileage of 25kmpl with four seating capacities.

class Vehicle:
    color = "white"

    def __init__(self, max_speed, mileage):
        self.max_speed = max_speed
        self.mileage = mileage
        self.seating_capacity = None

    def assign_seating_capacity(self, seating_capacity):
        self.seating_capacity = seating_capacity

    def display_properties(self):
        print("Properties of the Vehicle:")
        print("Color:", self.color)
        print("Maximum Speed:", self.max_speed)
        print("Mileage:", self.mileage)
        print("Seating Capacity:", self.seating_capacity)

# Creating the first vehicle object
vehicle1 = Vehicle(200, 20)
vehicle1.assign_seating_capacity(5)
vehicle1.display_properties()

# Creating the second vehicle object
vehicle2 = Vehicle(180, 25)
vehicle2.assign_seating_capacity(4)
vehicle2.display_properties()



The End..
THANK YOU !
